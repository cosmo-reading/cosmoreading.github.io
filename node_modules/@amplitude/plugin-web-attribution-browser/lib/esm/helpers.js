import {
    __assign,
    __read,
    __rest
} from "tslib";
import {
    BASE_CAMPAIGN
} from '@amplitude/analytics-client-common';
import {
    AMPLITUDE_PREFIX,
    createIdentifyEvent,
    Identify
} from '@amplitude/analytics-core';
export var getStorageKey = function(apiKey, postKey, limit) {
    if (postKey === void 0) {
        postKey = '';
    }
    if (limit === void 0) {
        limit = 10;
    }
    return [AMPLITUDE_PREFIX, postKey, apiKey.substring(0, limit)].filter(Boolean).join('_');
};
var domainWithoutSubdomain = function(domain) {
    var parts = domain.split('.');
    if (parts.length <= 2) {
        return domain;
    }
    return parts.slice(parts.length - 2, parts.length).join('.');
};
export var isNewCampaign = function(current, previous, options) {
    var _a;
    var referrer = current.referrer,
        referring_domain = current.referring_domain,
        currentCampaign = __rest(current, ["referrer", "referring_domain"]);
    var _b = previous || {},
        _previous_referrer = _b.referrer,
        prevReferringDomain = _b.referring_domain,
        previousCampaign = __rest(_b, ["referrer", "referring_domain"]);
    if (current.referring_domain && ((_a = options.excludeReferrers) === null || _a === void 0 ? void 0 : _a.includes(current.referring_domain))) {
        return false;
    }
    var hasNewCampaign = JSON.stringify(currentCampaign) !== JSON.stringify(previousCampaign);
    var hasNewDomain = domainWithoutSubdomain(referring_domain || '') !== domainWithoutSubdomain(prevReferringDomain || '');
    return !previous || hasNewCampaign || hasNewDomain;
};
export var createCampaignEvent = function(campaign, options) {
    var campaignParameters = __assign(__assign({}, BASE_CAMPAIGN), campaign);
    var identifyEvent = Object.entries(campaignParameters).reduce(function(identify, _a) {
        var _b;
        var _c = __read(_a, 2),
            key = _c[0],
            value = _c[1];
        identify.setOnce("initial_".concat(key), (_b = value !== null && value !== void 0 ? value : options.initialEmptyValue) !== null && _b !== void 0 ? _b : 'EMPTY');
        if (value) {
            return identify.set(key, value);
        }
        return identify.unset(key);
    }, new Identify());
    return createIdentifyEvent(identifyEvent);
};
//# sourceMappingURL=helpers.js.map