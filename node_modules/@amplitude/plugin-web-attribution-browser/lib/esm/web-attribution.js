import {
    __assign,
    __awaiter,
    __generator,
    __read
} from "tslib";
import {
    CampaignParser
} from '@amplitude/analytics-client-common';
import {
    PluginType,
} from '@amplitude/analytics-types';
import {
    createCampaignEvent,
    getStorageKey,
    isNewCampaign
} from './helpers';
export var webAttributionPlugin = function() {
    var _this = this;
    var _a;
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var amplitude;
    var options = {};
    var _b = __read(args, 2),
        clientOrOptions = _b[0],
        configOrUndefined = _b[1];
    if (clientOrOptions && 'init' in clientOrOptions) {
        amplitude = clientOrOptions;
        if (configOrUndefined) {
            options = configOrUndefined;
        }
    } else if (clientOrOptions) {
        options = clientOrOptions;
    }
    var excludeReferrers = (_a = options.excludeReferrers) !== null && _a !== void 0 ? _a : [];
    if (typeof location !== 'undefined') {
        excludeReferrers.unshift(location.hostname);
    }
    options = __assign(__assign({
        disabled: false,
        initialEmptyValue: 'EMPTY',
        resetSessionOnNewCampaign: false
    }, options), {
        excludeReferrers: excludeReferrers
    });
    var plugin = {
        name: 'web-attribution',
        type: PluginType.BEFORE,
        setup: function(config, client) {
            var _a;
            return __awaiter(this, void 0, void 0, function() {
                var receivedType, storage, storageKey, _b, currentCampaign, previousCampaign, pluginEnabledOverride, campaignEvent;
                return __generator(this, function(_c) {
                    switch (_c.label) {
                        case 0:
                            amplitude = amplitude !== null && amplitude !== void 0 ? amplitude : client;
                            if (!amplitude) {
                                receivedType = clientOrOptions ? 'Options' : 'undefined';
                                config.loggerProvider.error("Argument of type '".concat(receivedType, "' is not assignable to parameter of type 'BrowserClient'."));
                                return [2 /*return*/ ];
                            }
                            if (options.disabled) {
                                config.loggerProvider.log('@amplitude/plugin-web-attribution-browser is disabled. Attribution is not tracked.');
                                return [2 /*return*/ ];
                            }
                            config.loggerProvider.log('Installing @amplitude/plugin-web-attribution-browser.');
                            if (!client && !((_a = config.attribution) === null || _a === void 0 ? void 0 : _a.disabled)) {
                                config.loggerProvider.warn('@amplitude/plugin-web-attribution-browser overrides web attribution behavior defined in @amplitude/analytics-browser. Resolve by disabling web attribution tracking in @amplitude/analytics-browser.');
                                config.attribution = {
                                    disabled: true,
                                };
                            }
                            storage = config.cookieStorage;
                            storageKey = getStorageKey(config.apiKey, 'MKTG');
                            return [4 /*yield*/ , Promise.all([
                                new CampaignParser().parse(),
                                storage.get(storageKey),
                            ])];
                        case 1:
                            _b = __read.apply(void 0, [_c.sent(), 2]), currentCampaign = _b[0], previousCampaign = _b[1];
                            pluginEnabledOverride = this.__pluginEnabledOverride;
                            if (pluginEnabledOverride !== null && pluginEnabledOverride !== void 0 ? pluginEnabledOverride : isNewCampaign(currentCampaign, previousCampaign, options)) {
                                if (options.resetSessionOnNewCampaign) {
                                    amplitude.setSessionId(Date.now());
                                    config.loggerProvider.log('Created a new session for new campaign.');
                                }
                                config.loggerProvider.log('Tracking attribution.');
                                campaignEvent = createCampaignEvent(currentCampaign, options);
                                amplitude.track(campaignEvent);
                                void storage.set(storageKey, currentCampaign);
                            }
                            return [2 /*return*/ ];
                    }
                });
            });
        },
        execute: function(event) {
            return __awaiter(_this, void 0, void 0, function() {
                return __generator(this, function(_a) {
                    return [2 /*return*/ , event];
                });
            });
        },
    };
    // For Amplitude-internal functionality
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
    plugin.__pluginEnabledOverride = undefined;
    return plugin;
};
//# sourceMappingURL=web-attribution.js.map