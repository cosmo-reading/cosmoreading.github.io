import {
    __assign,
    __awaiter,
    __generator,
    __read,
    __spreadArray
} from "tslib";
import {
    CampaignParser,
    getGlobalScope
} from '@amplitude/analytics-client-common';
import {
    IdentifyOperation,
    PluginType,
} from '@amplitude/analytics-types';
import {
    BASE_CAMPAIGN
} from '@amplitude/analytics-client-common';
import {
    omitUndefined
} from './utils';
export var pageViewTrackingPlugin = function() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var amplitude;
    var options = {};
    var globalScope = getGlobalScope();
    var loggerProvider = undefined;
    var pushState;
    var _a = __read(args, 2),
        clientOrOptions = _a[0],
        configOrUndefined = _a[1];
    if (clientOrOptions && 'init' in clientOrOptions) {
        amplitude = clientOrOptions;
        if (configOrUndefined) {
            options = configOrUndefined;
        }
    } else if (clientOrOptions) {
        options = clientOrOptions;
    }
    var createPageViewEvent = function() {
        return __awaiter(void 0, void 0, void 0, function() {
            var _a;
            var _b;
            var _c;
            return __generator(this, function(_d) {
                switch (_d.label) {
                    case 0:
                        _b = {
                            event_type: (_c = options.eventType) !== null && _c !== void 0 ? _c : 'Page View'
                        };
                        _a = [{}];
                        return [4 /*yield*/ , getCampaignParams()];
                    case 1:
                        return [2 /*return*/ , (_b.event_properties = __assign.apply(void 0, [__assign.apply(void 0, _a.concat([(_d.sent())])), {
                                page_domain: /* istanbul ignore next */ (typeof location !== 'undefined' && location.hostname) || '',
                                page_location: /* istanbul ignore next */ (typeof location !== 'undefined' && location.href) || '',
                                page_path: /* istanbul ignore next */ (typeof location !== 'undefined' && location.pathname) || '',
                                page_title: /* istanbul ignore next */ (typeof document !== 'undefined' && document.title) || '',
                                page_url: /* istanbul ignore next */ (typeof location !== 'undefined' && location.href.split('?')[0]) || ''
                            }]),
                            _b)];
                }
            });
        });
    };
    var shouldTrackOnPageLoad = function() {
        return typeof options.trackOn === 'undefined' || (typeof options.trackOn === 'function' && options.trackOn());
    };
    /* istanbul ignore next */
    var previousURL = typeof location !== 'undefined' ? location.href : null;
    var trackHistoryPageView = function() {
        return __awaiter(void 0, void 0, void 0, function() {
            var newURL, shouldTrackPageView, _a, _b, _c;
            return __generator(this, function(_d) {
                switch (_d.label) {
                    case 0:
                        newURL = location.href;
                        shouldTrackPageView = shouldTrackHistoryPageView(options.trackHistoryChanges, newURL, previousURL || '') && shouldTrackOnPageLoad();
                        // Note: Update `previousURL` in the same clock tick as `shouldTrackHistoryPageView()`
                        // This was previously done after `amplitude?.track(await createPageViewEvent());` and
                        // causes a concurrency issue where app triggers `pushState` twice with the same URL target
                        // but `previousURL` is only updated after the second `pushState` producing two page viewed events
                        previousURL = newURL;
                        if (!shouldTrackPageView) return [3 /*break*/ , 4];
                        /* istanbul ignore next */
                        loggerProvider === null || loggerProvider === void 0 ? void 0 : loggerProvider.log('Tracking page view event');
                        if (!(amplitude === null || amplitude === void 0)) return [3 /*break*/ , 1];
                        _a = void 0;
                        return [3 /*break*/ , 3];
                    case 1:
                        _c = (_b = amplitude).track;
                        return [4 /*yield*/ , createPageViewEvent()];
                    case 2:
                        _a = _c.apply(_b, [_d.sent()]);
                        _d.label = 3;
                    case 3:
                        _a;
                        _d.label = 4;
                    case 4:
                        return [2 /*return*/ ];
                }
            });
        });
    };
    /* istanbul ignore next */
    var trackHistoryPageViewWrapper = function() {
        void trackHistoryPageView();
    };
    var plugin = {
        name: 'page-view-tracking',
        type: PluginType.ENRICHMENT,
        setup: function(config, client) {
            return __awaiter(void 0, void 0, void 0, function() {
                var receivedType, _a, _b;
                var _c, _d;
                return __generator(this, function(_e) {
                    switch (_e.label) {
                        case 0:
                            amplitude = amplitude !== null && amplitude !== void 0 ? amplitude : client;
                            if (!amplitude) {
                                receivedType = clientOrOptions ? 'Options' : 'undefined';
                                config.loggerProvider.error("Argument of type '".concat(receivedType, "' is not assignable to parameter of type 'BrowserClient'."));
                                return [2 /*return*/ ];
                            }
                            loggerProvider = config.loggerProvider;
                            loggerProvider.log('Installing @amplitude/plugin-page-view-tracking-browser');
                            options.trackOn = ((_c = config.attribution) === null || _c === void 0 ? void 0 : _c.trackPageViews) ? 'attribution' : options.trackOn;
                            if (!client && ((_d = config.attribution) === null || _d === void 0 ? void 0 : _d.trackPageViews)) {
                                loggerProvider.warn("@amplitude/plugin-page-view-tracking-browser overrides page view tracking behavior defined in @amplitude/analytics-browser. Resolve by disabling page view tracking in @amplitude/analytics-browser.");
                                config.attribution.trackPageViews = false;
                            }
                            if (options.trackHistoryChanges && globalScope) {
                                /* istanbul ignore next */
                                globalScope.addEventListener('popstate', trackHistoryPageViewWrapper);
                                // Save reference to original push state, to be used in teardown
                                // eslint-disable-next-line @typescript-eslint/unbound-method
                                pushState = globalScope.history.pushState;
                                /* istanbul ignore next */
                                // There is no global browser listener for changes to history, so we have
                                // to modify pushState directly.
                                // https://stackoverflow.com/a/64927639
                                // eslint-disable-next-line @typescript-eslint/unbound-method
                                globalScope.history.pushState = new Proxy(globalScope.history.pushState, {
                                    apply: function(target, thisArg, _a) {
                                        var _b = __read(_a, 3),
                                            state = _b[0],
                                            unused = _b[1],
                                            url = _b[2];
                                        target.apply(thisArg, [state, unused, url]);
                                        void trackHistoryPageView();
                                    },
                                });
                            }
                            if (!shouldTrackOnPageLoad()) return [3 /*break*/ , 2];
                            loggerProvider.log('Tracking page view event');
                            _b = (_a = amplitude).track;
                            return [4 /*yield*/ , createPageViewEvent()];
                        case 1:
                            _b.apply(_a, [_e.sent()]);
                            _e.label = 2;
                        case 2:
                            return [2 /*return*/ ];
                    }
                });
            });
        },
        execute: function(event) {
            return __awaiter(void 0, void 0, void 0, function() {
                var pageViewEvent;
                return __generator(this, function(_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(options.trackOn === 'attribution' && isCampaignEvent(event))) return [3 /*break*/ , 2];
                            /* istanbul ignore next */ // loggerProvider should be defined by the time execute is invoked
                            loggerProvider === null || loggerProvider === void 0 ? void 0 : loggerProvider.log('Enriching campaign event to page view event with campaign parameters');
                            return [4 /*yield*/ , createPageViewEvent()];
                        case 1:
                            pageViewEvent = _a.sent();
                            event.event_type = pageViewEvent.event_type;
                            event.event_properties = __assign(__assign({}, event.event_properties), pageViewEvent.event_properties);
                            _a.label = 2;
                        case 2:
                            return [2 /*return*/ , event];
                    }
                });
            });
        },
        teardown: function() {
            return __awaiter(void 0, void 0, void 0, function() {
                return __generator(this, function(_a) {
                    if (globalScope) {
                        globalScope.removeEventListener('popstate', trackHistoryPageViewWrapper);
                        if (pushState) {
                            globalScope.history.pushState = pushState;
                        }
                    }
                    return [2 /*return*/ ];
                });
            });
        },
    };
    // Required for unit tests
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
    plugin.__trackHistoryPageView = trackHistoryPageView;
    return plugin;
};
var getCampaignParams = function() {
    return __awaiter(void 0, void 0, void 0, function() {
        var _a;
        return __generator(this, function(_b) {
            switch (_b.label) {
                case 0:
                    _a = omitUndefined;
                    return [4 /*yield*/ , new CampaignParser().parse()];
                case 1:
                    return [2 /*return*/ , _a.apply(void 0, [_b.sent()])];
            }
        });
    });
};
var isCampaignEvent = function(event) {
    if (event.event_type === '$identify' && event.user_properties) {
        var properties = event.user_properties;
        var $set = properties[IdentifyOperation.SET] || {};
        var $unset = properties[IdentifyOperation.UNSET] || {};
        var userProperties_1 = __spreadArray(__spreadArray([], __read(Object.keys($set)), false), __read(Object.keys($unset)), false);
        return Object.keys(BASE_CAMPAIGN).every(function(value) {
            return userProperties_1.includes(value);
        });
    }
    return false;
};
export var shouldTrackHistoryPageView = function(trackingOption, newURL, oldURL) {
    switch (trackingOption) {
        case 'pathOnly':
            return newURL.split('?')[0] !== oldURL.split('?')[0];
        default:
            return newURL !== oldURL;
    }
};
//# sourceMappingURL=page-view-tracking.js.map