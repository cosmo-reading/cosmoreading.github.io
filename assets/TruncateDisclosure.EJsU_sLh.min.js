import {
    r as t,
    j as l,
    cY as f,
    f as v,
    h as i
} from "./app.BSN4W8HM.min.js";

function C({
    children: e
}) {
    const [n, r] = t.useState(!0), [s, o] = t.useState(!1);
    return l(d.Provider, {
        value: {
            truncated: n,
            setTruncated: r,
            overflowedContent: s,
            setOverflowedContent: o
        },
        children: e
    })
}
const d = t.createContext({}),
    m = 1,
    p = ({
        children: e,
        className: n,
        lines: r = 1
    }) => {
        const {
            truncated: s,
            setTruncated: o,
            setOverflowedContent: a
        } = t.useContext(d), c = t.useRef(null), u = t.useCallback(() => {
            c.current && a(c.current.scrollHeight - c.current.clientHeight > m)
        }, [a]);
        return f(() => (o(!0), window.addEventListener("resize", u), u(), () => window.removeEventListener("resize", u)), [u, e, o]), v("div", {
            className: "relative",
            children: [l("div", {
                className: i("absolute top-0 -z-10 line-clamp-1", n),
                "aria-hidden": !0,
                style: {
                    WebkitLineClamp: r
                },
                ref: c,
                children: e
            }), l("div", {
                className: i(s && "line-clamp-1", n),
                style: {
                    WebkitLineClamp: r
                },
                children: e
            })]
        })
    },
    x = ({
        showingComponent: e,
        hidingComponent: n,
        className: r
    }) => {
        const {
            truncated: s,
            setTruncated: o,
            overflowedContent: a
        } = t.useContext(d);
        return a ? l("button", {
            className: i("block", r),
            onClick: () => o(!s),
            children: s ? e : n
        }) : null
    };
C.Content = p;
C.Toggle = x;
export {
    C as T
};
//# sourceMappingURL=TruncateDisclosure.EJsU_sLh.min.js.map