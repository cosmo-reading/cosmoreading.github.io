import {
    b as m,
    c as g,
    S as h,
    d as p,
    C as x,
    e as C,
    f as M,
    g as b,
    R as A
} from "./index.DVPf4jiX.min.js";
const c = /["&'<>$\x80-\uFFFF]/g,
    v = new Map([
        [34, "&quot;"],
        [38, "&amp;"],
        [39, "&apos;"],
        [60, "&lt;"],
        [62, "&gt;"]
    ]),
    T = String.prototype.codePointAt != null ? (e, t) => e.codePointAt(t) : (e, t) => (e.charCodeAt(t) & 64512) === 55296 ? (e.charCodeAt(t) - 55296) * 1024 + e.charCodeAt(t + 1) - 56320 + 65536 : e.charCodeAt(t);

function f(e) {
    let t = "",
        r = 0,
        a;
    for (;
        (a = c.exec(e)) !== null;) {
        const n = a.index,
            i = e.charCodeAt(n),
            o = v.get(i);
        o !== void 0 ? (t += e.substring(r, n) + o, r = n + 1) : (t += `${e.substring(r,n)}&#x${T(e,n).toString(16)};`, r = c.lastIndex += +((i & 64512) === 55296))
    }
    return t + e.substr(r)
}

function u(e, t) {
    return function(a) {
        let n, i = 0,
            o = "";
        for (; n = e.exec(a);) i !== n.index && (o += a.substring(i, n.index)), o += t.get(n[0].charCodeAt(0)), i = n.index + 1;
        return o + a.substring(i)
    }
}
const w = u(/["&\u00A0]/g, new Map([
        [34, "&quot;"],
        [38, "&amp;"],
        [160, "&nbsp;"]
    ])),
    y = u(/[&<>\u00A0]/g, new Map([
        [38, "&amp;"],
        [60, "&lt;"],
        [62, "&gt;"],
        [160, "&nbsp;"]
    ])),
    S = new Map(["altGlyph", "altGlyphDef", "altGlyphItem", "animateColor", "animateMotion", "animateTransform", "clipPath", "feBlend", "feColorMatrix", "feComponentTransfer", "feComposite", "feConvolveMatrix", "feDiffuseLighting", "feDisplacementMap", "feDistantLight", "feDropShadow", "feFlood", "feFuncA", "feFuncB", "feFuncG", "feFuncR", "feGaussianBlur", "feImage", "feMerge", "feMergeNode", "feMorphology", "feOffset", "fePointLight", "feSpecularLighting", "feSpotLight", "feTile", "feTurbulence", "foreignObject", "glyphRef", "linearGradient", "radialGradient", "textPath"].map(e => [e.toLowerCase(), e])),
    L = new Map(["definitionURL", "attributeName", "attributeType", "baseFrequency", "baseProfile", "calcMode", "clipPathUnits", "diffuseConstant", "edgeMode", "filterUnits", "glyphRef", "gradientTransform", "gradientUnits", "kernelMatrix", "kernelUnitLength", "keyPoints", "keySplines", "keyTimes", "lengthAdjust", "limitingConeAngle", "markerHeight", "markerUnits", "markerWidth", "maskContentUnits", "maskUnits", "numOctaves", "pathLength", "patternContentUnits", "patternTransform", "patternUnits", "pointsAtX", "pointsAtY", "pointsAtZ", "preserveAlpha", "preserveAspectRatio", "primitiveUnits", "refX", "refY", "repeatCount", "repeatDur", "requiredExtensions", "requiredFeatures", "specularConstant", "specularExponent", "spreadMethod", "startOffset", "stdDeviation", "stitchTiles", "surfaceScale", "systemLanguage", "tableValues", "targetX", "targetY", "textLength", "viewBox", "viewTarget", "xChannelSelector", "yChannelSelector", "zoomAndPan"].map(e => [e.toLowerCase(), e])),
    D = new Set(["style", "script", "xmp", "iframe", "noembed", "noframes", "plaintext", "noscript"]);

function E(e) {
    return e.replace(/"/g, "&quot;")
}

function F(e, t) {
    var r;
    if (!e) return;
    const a = ((r = t.encodeEntities) !== null && r !== void 0 ? r : t.decodeEntities) === !1 ? E : t.xmlMode || t.encodeEntities !== "utf8" ? f : w;
    return Object.keys(e).map(n => {
        var i, o;
        const s = (i = e[n]) !== null && i !== void 0 ? i : "";
        return t.xmlMode === "foreign" && (n = (o = L.get(n)) !== null && o !== void 0 ? o : n), !t.emptyAttrs && !t.xmlMode && s === "" ? n : `${n}="${a(s)}"`
    }).join(" ")
}
const l = new Set(["area", "base", "basefont", "br", "col", "command", "embed", "frame", "hr", "img", "input", "isindex", "keygen", "link", "meta", "param", "source", "track", "wbr"]);

function d(e, t = {}) {
    const r = "length" in e ? e : [e];
    let a = "";
    for (let n = 0; n < r.length; n++) a += P(r[n], t);
    return a
}

function P(e, t) {
    switch (e.type) {
        case A:
            return d(e.children, t);
        case b:
        case M:
            return R(e);
        case C:
            return I(e);
        case x:
            return q(e);
        case p:
        case h:
        case g:
            return k(e, t);
        case m:
            return G(e, t)
    }
}
const U = new Set(["mi", "mo", "mn", "ms", "mtext", "annotation-xml", "foreignObject", "desc", "title"]),
    $ = new Set(["svg", "math"]);

function k(e, t) {
    var r;
    t.xmlMode === "foreign" && (e.name = (r = S.get(e.name)) !== null && r !== void 0 ? r : e.name, e.parent && U.has(e.parent.name) && (t = { ...t,
        xmlMode: !1
    })), !t.xmlMode && $.has(e.name) && (t = { ...t,
        xmlMode: "foreign"
    });
    let a = `<${e.name}`;
    const n = F(e.attribs, t);
    return n && (a += ` ${n}`), e.children.length === 0 && (t.xmlMode ? t.selfClosingTags !== !1 : t.selfClosingTags && l.has(e.name)) ? (t.xmlMode || (a += " "), a += "/>") : (a += ">", e.children.length > 0 && (a += d(e.children, t)), (t.xmlMode || !l.has(e.name)) && (a += `</${e.name}>`)), a
}

function R(e) {
    return `<${e.data}>`
}

function G(e, t) {
    var r;
    let a = e.data || "";
    return ((r = t.encodeEntities) !== null && r !== void 0 ? r : t.decodeEntities) !== !1 && !(!t.xmlMode && e.parent && D.has(e.parent.name)) && (a = t.xmlMode || t.encodeEntities !== "utf8" ? f(a) : y(a)), a
}

function q(e) {
    return `<![CDATA[${e.children[0].data}]]>`
}

function I(e) {
    return `<!--${e.data}-->`
}
export {
    d as r
};
//# sourceMappingURL=index.DXPNvZkV.min.js.map